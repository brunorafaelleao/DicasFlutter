1) Início do projeto
-> Depois de iniciar o projeto flutter,
localizar o arquivo main.dart
-> Abrir o arquivo e excluir as anotações presentes

2) Iniciando a activity:
-> Toda activity inicia com a função main(){ } e depois entre chaves
inserimos a função para rodar o widget runApp() e dentro dela colocamos
a nossa classe. A nossa classe deixamos no próprio arquivo e criamos usando
class NomeDaClasse que extendemos de uma classe de widget que é a StatelessWidget
ex:
import 'package:flutter/material.dart';

main(){
runApp(PerguntaApp());
}

class PerguntaApp extends StatelessWidget{

  //Método build vai retornar o widget
  @override
  Widget build(BuildContext context){
    return MaterialApp(
      home: Text('Bruno', style: TextStyle(fontSize: 60, color: Colors.blue),),
    );
  }
}

3) Árvore de componentes:
-> Scaffold = é uma estrutura em Flutter que usamos para inserir dentro dela nossos
componentes (widgets).
Seguindo o exemplo anterior:
o retorno da nossa Classe traz um MaterialApp que tem como atributos um Scaffold que
traz outros atributos: appBar, body.
ex:
class PerguntaApp extends StatelessWidget{

  //Método build vai retornar o widget
  @override
  Widget build(BuildContext context){
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.blue,
         title: Text('Aplicativo'),
        ),
        body: Text('Bruno'),
      )
      //Text('Bruno', style: TextStyle(fontSize: 60, color: Colors.blue),),
    );
  }
}

4) Diferentes tipos de Widgets:
-> Visíveis: O que vemos exibido/desenhado na tela
-Entradas e Saídas (RaisedButton(), Text, Card())
-> Invisíveis: O que prover a estrutura do App e controla como os widgets visíveis são
desenhados na tela
-Layout e controle (Row, Column(), ListView())
Obs: Temos também o Container() que pode ser invisível para agrupar Widgets mas também
visível quando colocamos formatos a ele.

5) Usando Colunas (Column) para organizar Widgets
-> Vamos usar o Widget Column dentro do body do Scaffold.
ex1:
body Column(
//ele vai receber um atributo children que vai receber uma lista [] de Widgets <Widget>
//Não é obrigatório colocar o elemento generics <Widget>
children: <Widget> [
]
)
ex2:
class PerguntaApp extends StatelessWidget{

  //Método build vai retornar o widget
  @override
  Widget build(BuildContext context){
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.blue,
         title: Text('Perguntas', style: TextStyle(fontSize: 22, color: Colors.white),),
        ),
        body: Column(
          children: <Widget> [
            Text('Linha 1'),
            Text('Linha 2'),
            Text('Linha 3'),

          ],
        )
      )
      //Text('Bruno', style: TextStyle(fontSize: 60, color: Colors.blue),),
    );
  }
}

6) Inserir um botão
-> Um Widget de botão é o ElevatedButton
ex: O texto entra como elemento child desse widget e o método de pressionar
é onPressed
//inserir botões para respostas
            ElevatedButton(
              child: Text('Resposta 1'),
              onPressed: null,
            ),ElevatedButton(
              child: Text('Resposta 2'),
              onPressed: null,
            ),ElevatedButton(
              child: Text('Resposta 3'),
              onPressed: null,
            ),
-> Para colocar uma função ou habilitar o método/evento onPressed:
a) Podemos criar uma função e depois chamá-la no onPressed:
void resposta (){ print('Resposta clicada') }
ElevatedButton(
              child: Text('Resposta 3'),
              onPressed: resposta,
obs: Não passar resposta() a não ser se vc disser que resposta() faz parte de uma outra função que
retorna uma função ex: void function() responder(){ return(){print('Respondida') } }

b) Podemos passar o evento dentro da própria estrutura do onPressed
ex:
onPressed: (){
                print('Resposta 3 foi selecionada');
              },

c) Podemos passar como uma função anônima usando arrow:
ex:
onPressed: ()=> print('Resposta 2 foi selecionada'),

7) Diferença entre Stateless e Stateful
-> Stateless: Renderiza a UI (dados podem mudar externamente)
-> Stateful :Renderuza a UI e os dados mudam