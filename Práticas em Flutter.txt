1) iniciando um projeto:
- Ao abrir o arquivo  main.dart, mudar o script inciando com
void main(){

runApp(MaterialApp())
}

2) Para retirar a expressão "debug" do layout do app no emulador:
-Digitar dentro do MaterialApp: debugShowCheckedModeBanner: false

3) Dica de uso de um modelo ou esqueleto para layout em Flutter:
- Scaffold. 
- Digitar dentro do MaterialApp(home: Scaffold(
obs: Ele possui uma opção para appBar, body (que é o corpo do layout) e bottomNavigationBar
ex:
void main(){

  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: Scaffold(
      appBar: AppBar(
        title: Text("Instagram", style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blueGrey,
      ),
      body: Padding(
        padding: EdgeInsets.all(40),
        child: Text("Conteúdo principal"),
      ),
      bottomNavigationBar: BottomAppBar(
        color: Colors.green,
        child: Text("Bruno Rafael", style: TextStyle(color: Colors.black),),
      ),
    ),
  )
 );
}

4) Uso de um Widget Stateless & Stateful
- Stateless (widget que não pode ser alterado -> constante)
- Statefull (widget que pode ser alterado -> variável)

5) Inserir imagens em projeto Flutter
-> Alterar a exibição das pastas do projeto para Project
--> Na parte que aparece o nome do projeto, clicar com o borão direito, opção new, depois directory e nomear a pasta com titulo: imagens
---> Copiar as imagens da pasta do computador e colar na pasta imagens criada em project
----> Abrir o arquivo pubspec.yaml e localizar a parte que está flutter: uses-material-design: true
-----> Seguir as regras do próprio arquivo para usar as imagens. Após a linha do uses-material-design, digitar:
assets: -images/nomedaimagem.extensão (Depois de digitar essa linha, clicar em pub get)
Obs: Para mais de uma imagem, seguir o exemplo:
  assets:
    - imagens/padrao.png
    - imagens/papel.png
    - imagens/pedra.png
    - imagens/tesoura.png
------> Após esse procedimento, no arquivo .dart do layout colocar a imagem
ex: child: Image.asset("imagens/nomearquivo.extensão")

6) Preenchimento e espaçamentos de widgets.
Exemplo:
body: Container(
      padding: EdgeInsets.all(28),
      child: Column(
        children: <Widget> [
          Padding(padding: EdgeInsets.only(bottom: 32),
          child: Image.asset("imagens/logo.png"),
          ),//Padding da imagem
          Padding(padding: EdgeInsets.only(top: 15),
              child: Text("Saiba qual a melhor opção para abastecimento do seu carro")
          ),//padding do texto          
        ],//final dos widgets
      ),//final da coluna
    )//final container  

7) Exemplo de formatação de textos
-> Text("meu_texto", style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18), textAlign: TextAlign.center,)
para trocar a cor do texto ==> style: TextStyle(color: Colors.white)
para colocar em negrito ==> style: TextStyle(fontWeight: FontWeight.bold)
para alterar o tamanho da fonte ==>  style: TextStyle(fontSize: 18)
para centralizar o texto ==> textAlign: TextAlign.center

8) Uso de ScrollView
-> Uma dica para o uso de ScrollView é usá-lo dentro de um Container.
Segue exemplo de um SrollView que foi inserido dentro de um "body" em uma estrutura Scaffold
body: Container(
      child: SingleChildScrollView(

9) Uso de checkbox
-> CheckboxListTile(
	title: Text("texto do checkbox"),
	subtitle: Text("texto alternativo"),
	activeColor: Colors.red,)

10) RadioButton (widget para marcar apenas uma opção)
-> Uma dica é colocá-lo dentro de uma row
RadioListTile(
 title: Text("Masculino"),
   value 1,
   gruopValue: _escolhaUsuario,
   onChanged: (int escolha){
   setState((){
     _escolhaUsuario = escolha); 
    });
  }
),

11) Switch
-> Depois de State<NomeDaClasse>{
bool _escolhaUsuario = false;

-> SwitchListTile(
    title: Text("Receber notificações?"),
     value: _escolhaUsuario,
     onChanged: (bool valor){
      setState((){
      _ecolhaUsuario = valor;
      });
   }
 )

12) Inserindo colunas
->No caso das colunas, podemos usar dentro de um body e é importante ressaltar que
ao inserir uma coluna ela pede um elemento children com uma lista. Obs: A parte generics <Widget> é opcional
--> Column(
children: <Widget> [

]
),

13)Navegação entre telas
-> Usar a Classe Navigator: Navigator.push ou Navigator.pop
--> push abre uma tela e o pop fecha a atual e abre a nova
Ex: Podemos inserir um botão e no onPressed desse botão colocar a classe
RaisedButton(
child: Text("Ir pra outra tela"),
onPressed: (){
 Navigator.push(context,
                 MaterialPageRoute(builder: (context)=> TelaSecundaria();   //context: Em qual tela estou? a route é pra onde quero ir
}
)

14) Trocar a imagem do ícone do app
Para alterar o ícone do aplicativo no Flutter, você precisa substituir os ícones padrão nas pastas específicas do sistema operacional do dispositivo (Android e iOS). Aqui está um passo a passo detalhado:  
Android
Gerar Ícones: Primeiro, crie seu ícone em diferentes tamanhos para suportar diferentes densidades de tela. Você pode usar ferramentas online como o "App Icon Maker" para gerar esses ícones.
Substituir Ícones: Navegue até android/app/src/main/res. Aqui, você encontrará várias pastas começando com mipmap- seguidas de um identificador de densidade de tela (por exemplo, mipmap-hdpi, mipmap-mdpi). Substitua os ícones existentes nessas pastas pelos seus ícones correspondentes.
Atualizar AndroidManifest.xml: Certifique-se de que o AndroidManifest.xml está apontando para o ícone correto com a tag <application android:icon="@mipmap/ic_launcher">.
iOS
Gerar Ícones: Assim como para Android, crie seu ícone em diferentes tamanhos para suportar diferentes dispositivos iOS.
Substituir Ícones: Abra o projeto iOS no Xcode (ios/Runner.xcworkspace). No navegador de projetos, selecione Assets.xcassets. Localize o conjunto de ícones do aplicativo chamado AppIcon. Arraste e solte seus ícones nos slots correspondentes.
Verificar Configurações: Certifique-se de que o conjunto de ícones do aplicativo está corretamente configurado nas configurações do seu projeto no Xcode.
Dica
Para facilitar o processo, você pode usar o pacote flutter_launcher_icons no Flutter. Adicione o pacote ao seu pubspec.yaml e configure os caminhos para seus ícones. Depois, execute flutter pub run flutter_launcher_icons:main para atualizar automaticamente os ícones em ambas as plataformas.


